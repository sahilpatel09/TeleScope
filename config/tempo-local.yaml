# https://github.com/grafana/tempo/blob/main/example/docker-compose/local/tempo.yaml
stream_over_http_enabled: true
server:
  http_listen_port: 3200
  log_level: info

query_frontend:
  search:
    duration_slo: 5s
    throughput_bytes_slo: 1.073741824e+09
    metadata_slo:
        duration_slo: 5s
        throughput_bytes_slo: 1.073741824e+09
  trace_by_id:
    duration_slo: 100ms
  metrics:
    # maximum duration of a metrics query, increase for local setups
    max_duration: 200h
    query_backend_after: 5m
    duration_slo: 5s
    throughput_bytes_slo: 1.073741824e+09


# this configuration will listen on all ports and protocols that tempo is capable of.
# the receives all come from the OpenTelemetry collector.  more configuration information can
# be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
#
# for a production deployment you should only enable the receivers you need!
# this configuration will listen on all ports and protocols that tempo is capable of.
distributor:
  receivers:                           
    otlp:
      protocols:
        grpc:
          endpoint: "0.0.0.0:9091"
        http:
          endpoint: "0.0.0.0:4318"

# cut the headblock when this much time passes. this is being set for demo purposes and should probably be left alone normally
ingester:
  max_block_duration: 5m

# overall Tempo trace retention. setting for demo purposes
compactor:
  compaction:
    block_retention: 720h

metrics_generator:
  registry:
    external_labels:
      source: tempo
      cluster: docker-compose
  storage:
    path: /var/tempo/generator/wal
    remote_write:
      - url: http://prometheus:9090/api/v1/write
        send_exemplars: true
  traces_storage:
    path: /var/tempo/generator/traces
  processor:
    local_blocks:
      filter_server_spans: false
      flush_to_storage: true

storage:
  trace:
    backend: local
    wal:
      path: /var/tempo/wal
    local:
      path: /var/tempo/blocks

overrides:
  defaults:
    metrics_generator:
      processors: [service-graphs, span-metrics, local-blocks]
      generate_native_histograms: both
      